# üöÄ Monstra Release Workflow

## üìã **Development & Release Process**

### **1. Development Phase: Work on develop branch**
- **Primary development**: All feature development and bug fixes occur on the `develop` branch
- **Feature branching**: Create dedicated feature branches from `develop` for significant changes or new features
- **Integration workflow**: Merge completed feature branches back to `develop` through pull requests with code review
- **Branch purpose**: Maintain `develop` as the primary integration branch for ongoing development work

### **2. Quality Assurance: Validate and merge to main for release preparation**
- **Pre-merge validation**: Ensure all continuous integration workflows pass successfully on the `develop` branch:
  - ‚úÖ **Coverage tests** (ci.yml) - Executes comprehensive test suite with coverage analysis on develop pushes
  - ‚úÖ **Development monitoring** (scheduled-tests-dev.yml) - Runs automated health checks every 15 minutes on develop
- **Release preparation**: Create a pull request from `develop` ‚Üí `main` with detailed release notes
- **Code review and merge**: Conduct thorough review and merge to the `main` branch when ready for release
- **Post-merge verification**: Confirm main branch workflows execute successfully:
  - ‚úÖ **Documentation deployment** (docs.yml) - Generates and publishes API documentation on main pushes  
  - ‚úÖ **Production monitoring** (scheduled-tests.yml) - Runs stability checks every 4 hours on main
- **Branch stability**: The `main` branch represents production-ready, stable code suitable for public release

### **3. Version Tagging: Apply semantic version tag to main branch**
- **Tag target**: Apply version tag to the merge commit on the `main` branch
- **Naming convention**: Use semantic versioning format `vX.Y.Z` (examples: `v1.0.0`, `v0.1.0`, `v2.3.1`)
- **Semantic versioning guidelines**:
  - **MAJOR version** (X): Increment for incompatible API changes or breaking modifications
  - **MINOR version** (Y): Increment for new functionality that maintains backward compatibility
  - **PATCH version** (Z): Increment for backward-compatible bug fixes and minor improvements

### **4. Release Publication: Execute comprehensive release process**

#### **Pre-Release Checklist:**

##### **Version Consistency Check:**
- [ ] Update `Monstra.podspec` version number (line 3: `spec.version = "X.Y.Z"`)
- [ ] Update version references in README.md (CocoaPods example: `pod 'Monstra', '~> X.Y.Z'`)
- [ ] Update version in Package.swift if needed
- [ ] Update CHANGELOG.md with new version entry and release notes
- [ ] Update any hardcoded version references in documentation files

##### **Project Links Verification:**
**Direct Control URLs (Check these):**
- [ ] **GitHub Repository**: https://github.com/yangchenlarkin/Monstra
- [ ] **API Documentation**: https://yangchenlarkin.github.io/Monstra/

**Third-Party Platforms (Will update automatically after release):**
- ‚è≥ **Swift Package Index**: https://swiftpackageindex.com/yangchenlarkin/Monstra *(updates within 24-48 hours)*
- ‚è≥ **CocoaPods**: https://cocoapods.org/pods/Monstra *(updates after `pod trunk push`)*
- ‚è≥ **awesome-swift PR**: https://github.com/matteocrippa/awesome-swift/pull/1872 *(pending maintainer review)*

**Documentation & Resources:**
- [ ] **README.md examples** - Verify all code snippets compile and work
- [ ] **API Documentation links** - Ensure all internal documentation links resolve
- [ ] **Example projects** - Test all example project links and compilation
- [ ] **License file** - Verify LICENSE file is accessible and current
- [ ] **Contributing guidelines** - Check CONTRIBUTING.md links and instructions
- [ ] **Security policy** - Verify SECURITY.md is up-to-date and accessible

##### **Technical Validation:**
- [ ] **Package Manager Integration**:
  - [ ] Swift Package Manager: Test `swift package resolve` with new version
  - [ ] CocoaPods: Validate `pod spec lint Monstra.podspec` passes
- [ ] **Cross-Platform Compatibility**:
  - [ ] iOS build verification
  - [ ] macOS build verification  
  - [ ] tvOS build verification
  - [ ] watchOS build verification
- [ ] **Documentation Generation**:
  - [ ] Run `bash Scripts/generate-docs.sh` successfully
  - [ ] Verify docs deploy to GitHub Pages without errors
  - [ ] Check all API documentation renders correctly
- [ ] **Quality Assurance**:
  - [ ] Full test suite passes: `swift test`
  - [ ] Code coverage meets standards (99%+)
  - [ ] No linter warnings or errors
  - [ ] Performance benchmarks within acceptable ranges

#### **Release Process:**
1. **Create Git Tag**
   ```bash
   git checkout main
   git pull origin main
   git tag vX.Y.Z  # Replace X.Y.Z with actual version (e.g., v1.0.0, v0.1.5, v2.3.1)
   git push origin vX.Y.Z
   ```

2. **Create GitHub Release**
   - Go to GitHub ‚Üí Releases ‚Üí "Create a new release"
   - Select the tag you just created (vX.Y.Z)
   - Release title: `vX.Y.Z - [Release Name]` (e.g., `v1.0.0 - Stable Release`)
   - Generate release notes or write custom notes
   - Mark as "Latest release"
   - Publish release

3. **Update Package Managers**
   - [ ] **CocoaPods**: Run `pod trunk push Monstra.podspec`
   - [ ] **Swift Package Index**: Automatic update (monitors tags)
   - [ ] Verify package manager integration works

4. **Update Documentation**
   - [ ] Ensure docs.yml workflow runs and updates GitHub Pages
   - [ ] Verify API documentation reflects new version
   - [ ] Update any external documentation references

5. **Community Notifications**
   - [ ] Update awesome-swift PR if version was a concern
   - [ ] Post release announcement on social media
   - [ ] Update any blog posts or articles
   - [ ] Notify users in GitHub Discussions (if enabled)

6. **Post-Release Verification**
   - [ ] Test installation via Swift Package Manager
   - [ ] Test installation via CocoaPods
   - [ ] Verify Swift Package Index shows new version
   - [ ] Check that documentation site is updated
   - [ ] Monitor for any immediate issues or feedback

#### **Release Notes Template:**
```markdown
## What's New in vX.Y.Z

### üöÄ New Features
- Feature 1 description
- Feature 2 description

### üêõ Bug Fixes
- Bug fix 1 description
- Bug fix 2 description

### üìö Documentation
- Documentation improvements
- New examples added

### üîß Technical Changes
- Performance improvements
- Internal refactoring

### üì¶ Installation
**Swift Package Manager:**
```swift
.package(url: "https://github.com/yangchenlarkin/Monstra.git", from: "X.Y.Z")
```
