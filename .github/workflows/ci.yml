name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every 30 minutes today, then every 4 hours for next 5 days
    - cron: '*/30 * * * *'  # Every 30 minutes
    - cron: '0 */4 * * *'   # Every 4 hours

jobs:
  # Determine if scheduled run should proceed based on date and frequency
  check-schedule:
    name: Check Schedule
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.schedule-check.outputs.should-run }}
      frequency-type: ${{ steps.schedule-check.outputs.frequency-type }}
    
    steps:
    - name: Check Schedule Logic
      id: schedule-check
      run: |
        echo "Event type: ${{ github.event_name }}"
        
        # For non-scheduled runs (push, PR), always run
        if [ "${{ github.event_name }}" != "schedule" ]; then
          echo "Non-scheduled run - proceeding with all tests"
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "frequency-type=on-demand" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For scheduled runs, check the timing logic
        echo "Scheduled run - checking timing logic"
        
        # Get current date and time
        CURRENT_DATE=$(date -u +%Y-%m-%d)
        CURRENT_HOUR=$(date -u +%H)
        CURRENT_MINUTE=$(date -u +%M)
        
        # Define the start date (today) - Update this date when deploying
        START_DATE="2025-08-20"  # Update this to deployment date
        
        # Calculate days since start
        DAYS_DIFF=$(( ( $(date -d "$CURRENT_DATE" +%s) - $(date -d "$START_DATE" +%s) ) / 86400 ))
        
        echo "Current date: $CURRENT_DATE"
        echo "Start date: $START_DATE"  
        echo "Days difference: $DAYS_DIFF"
        echo "Current time: ${CURRENT_HOUR}:${CURRENT_MINUTE}"
        
        # Determine if we should run based on the schedule
        should_run="false"
        frequency_type=""
        
        if [ $DAYS_DIFF -eq 0 ]; then
          # Today: Run every 30 minutes (with 5-minute tolerance for GitHub Actions delays)
          echo "Today - checking 30-minute schedule"
          MINUTE_MOD_30=$(( $CURRENT_MINUTE % 30 ))
          if [ $MINUTE_MOD_30 -le 5 ] || [ $MINUTE_MOD_30 -ge 25 ]; then
            should_run="true"
            frequency_type="every-30-min"
            echo "✅ Running on 30-minute schedule (minute $CURRENT_MINUTE, mod 30 = $MINUTE_MOD_30)"
          else
            echo "⏭️ Skipping - not within 30-minute boundary (minute $CURRENT_MINUTE, mod 30 = $MINUTE_MOD_30)"
          fi
        elif [ $DAYS_DIFF -ge 1 ] && [ $DAYS_DIFF -le 5 ]; then
          # Next 5 days: Run every 4 hours (with 10-minute tolerance for GitHub Actions delays)
          echo "Days 1-5 - checking 4-hour schedule"
          HOUR_MOD_4=$(( $CURRENT_HOUR % 4 ))
          if [ $HOUR_MOD_4 -eq 0 ] && [ $CURRENT_MINUTE -le 10 ]; then
            should_run="true"
            frequency_type="every-4-hours"
            echo "✅ Running on 4-hour schedule (time ${CURRENT_HOUR}:${CURRENT_MINUTE})"
          else
            echo "⏭️ Skipping - not within 4-hour boundary (time ${CURRENT_HOUR}:${CURRENT_MINUTE}, hour mod 4 = $HOUR_MOD_4)"
          fi
        else
          echo "⏹️ Outside schedule window - stopping scheduled runs"
        fi
        
        echo "should-run=$should_run" >> $GITHUB_OUTPUT
        echo "frequency-type=$frequency_type" >> $GITHUB_OUTPUT
        echo "Final decision: should_run=$should_run, frequency_type=$frequency_type"

  build:
    name: Build
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: |
        echo "Available Xcode installations:"
        ls -la /Applications/ | grep -i xcode || echo "No Xcode found with ls"
        find /Applications -name "Xcode*.app" -maxdepth 1 | sort || echo "No Xcode found with find"
        
        # Try common Xcode paths in order of preference
        if [ -d "/Applications/Xcode.app" ]; then
          echo "Using default Xcode.app"
          sudo xcode-select -switch /Applications/Xcode.app
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          echo "Using Xcode_15.4.app"
          sudo xcode-select -switch /Applications/Xcode_15.4.app
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          echo "Using Xcode_15.3.app"
          sudo xcode-select -switch /Applications/Xcode_15.3.app
        elif [ -d "/Applications/Xcode_15.2.app" ]; then
          echo "Using Xcode_15.2.app"
          sudo xcode-select -switch /Applications/Xcode_15.2.app
        elif [ -d "/Applications/Xcode_14.3.app" ]; then
          echo "Using Xcode_14.3.app"
          sudo xcode-select -switch /Applications/Xcode_14.3.app
        else
          # Find any available Xcode and use it
          XCODE_PATH=$(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
          if [ -n "$XCODE_PATH" ]; then
            echo "Using found Xcode: $XCODE_PATH"
            sudo xcode-select -switch "$XCODE_PATH"
          else
            echo "ERROR: No Xcode installation found!"
            exit 1
          fi
        fi
    
    - name: Show Xcode version
      run: xcodebuild -version
    
    - name: Build Package
      run: swift build

  # Validation job to ensure all test files are covered by CI jobs
  validate-test-coverage:
    name: Validate All Tests Are in CI
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: 
      - check-schedule
      - build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Test Coverage
      run: |
        echo "🔍 Validating that all test files are included in CI jobs..."
        
        # Find all test files
        echo "📋 Found test files:"
        find Tests -name "*Test*.swift" -type f | sort | while read file; do
          basename=$(basename "$file" .swift)
          echo "  - $basename"
        done
        
        # List expected test jobs from this CI file
        echo ""
        echo "🎯 Expected CI test jobs:"
        expected_tests=(
          "MonoTaskTests"
          "MonoTaskCrossScenarioTests" 
          "MonoTaskClearResultTests"
          "KVHeavyTasksManagerTests"
          "KVLightTasksManagerTests"
          "RetryCountTests"
          "HashQueueTests"
          "CPUTimeStampTests"
          "HeapTests"
          "DoublyLinkTests"
          "TracingIDFactoryTest"
          "HeapPerformanceTests"
          "CPUTimeStampPerformanceTests"
          "CacheStatisticsTests"
          "MemoryCacheTests"
          "PriorityLRUQueueTests"
          "TTLPriorityLRUQueueTests"
          "MemoryCachePerformanceTests"
          "PriorityLRUQueuePerformanceTests"
          "TTLPriorityLRUQueuePerformanceTests"
        )
        
        for test in "${expected_tests[@]}"; do
          echo "  - $test"
        done
        
        echo ""
        echo "🕵️ Checking for missing test files..."
        
        # Check if any test files are missing from CI
        missing_tests=()
        find Tests -name "*Test*.swift" -type f | while read file; do
          basename=$(basename "$file" .swift)
          found=false
          for expected in "${expected_tests[@]}"; do
            if [ "$basename" = "$expected" ]; then
              found=true
              break
            fi
          done
          if [ "$found" = "false" ]; then
            echo "❌ MISSING: $basename is not covered by CI jobs"
            echo "$basename" >> /tmp/missing_tests
          fi
        done
        
        # Check if any CI jobs reference non-existent test files
        echo ""
        echo "🕵️ Checking for invalid CI test jobs..."
        
        invalid_jobs=()
        for expected in "${expected_tests[@]}"; do
          if ! find Tests -name "${expected}.swift" -type f | grep -q .; then
            echo "❌ INVALID: CI job references non-existent test file: $expected"
            echo "$expected" >> /tmp/invalid_jobs
          fi
        done
        
        # Final validation
        echo ""
        if [ -f /tmp/missing_tests ] || [ -f /tmp/invalid_jobs ]; then
          echo "💥 TEST COVERAGE VALIDATION FAILED!"
          echo ""
          if [ -f /tmp/missing_tests ]; then
            echo "Missing test files from CI:"
            cat /tmp/missing_tests
            echo ""
          fi
          if [ -f /tmp/invalid_jobs ]; then
            echo "Invalid CI jobs (no matching test file):"
            cat /tmp/invalid_jobs
            echo ""
          fi
          echo "Please update the CI configuration to include all test files."
          exit 1
        else
          echo "✅ SUCCESS: All test files are properly covered by CI jobs!"
        fi

  # Monstask Tests
  test-monotask:
    name: MonoTask Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run MonoTask Tests
      run: swift test --filter MonoTaskTests

  test-monotask-cross-scenario:
    name: MonoTask Cross-Scenario Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run MonoTask Cross-Scenario Tests
      run: swift test --filter MonoTaskCrossScenarioTests

  test-monotask-clear-result:
    name: MonoTask Clear Result Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run MonoTask Clear Result Tests
      run: swift test --filter MonoTaskClearResultTests

  test-kv-heavy-tasks-manager:
    name: KV Heavy Tasks Manager Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run KV Heavy Tasks Manager Tests
      run: swift test --filter KVHeavyTasksManagerTests

  test-kv-light-tasks-manager:
    name: KV Light Tasks Manager Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run KV Light Tasks Manager Tests
      run: swift test --filter KVLightTasksManagerTests

  # MonstraBase Tests
  test-retry-count:
    name: RetryCount Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run RetryCount Tests
      run: swift test --filter RetryCountTests

  test-hash-queue:
    name: HashQueue Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run HashQueue Tests
      run: swift test --filter HashQueueTests

  test-cpu-timestamp:
    name: CPUTimeStamp Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run CPUTimeStamp Tests
      run: swift test --filter CPUTimeStampTests

  test-heap:
    name: Heap Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Heap Tests
      run: swift test --filter HeapTests

  test-doubly-link:
    name: DoublyLink Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run DoublyLink Tests
      run: swift test --filter DoublyLinkTests

  test-tracing-id-factory:
    name: TracingIDFactory Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run TracingIDFactory Tests
      run: swift test --filter TracingIDFactoryTest

  # Performance Tests (MonstraBase)
  test-heap-performance:
    name: Heap Performance Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Heap Performance Tests
      run: swift test --filter HeapPerformanceTests

  test-cpu-timestamp-performance:
    name: CPUTimeStamp Performance Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run CPUTimeStamp Performance Tests
      run: swift test --filter CPUTimeStampPerformanceTests

  # Monstore Tests
  test-cache-statistics:
    name: Cache Statistics Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Cache Statistics Tests
      run: swift test --filter CacheStatisticsTests

  test-memory-cache:
    name: Memory Cache Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Memory Cache Tests
      run: swift test --filter MemoryCacheTests

  test-priority-lru-queue:
    name: Priority LRU Queue Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Priority LRU Queue Tests
      run: swift test --filter PriorityLRUQueueTests

  test-ttl-priority-lru-queue:
    name: TTL Priority LRU Queue Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run TTL Priority LRU Queue Tests
      run: swift test --filter TTLPriorityLRUQueueTests

  # Performance Tests (Monstore)
  test-memory-cache-performance:
    name: Memory Cache Performance Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Memory Cache Performance Tests
      run: swift test --filter MemoryCachePerformanceTests

  test-priority-lru-queue-performance:
    name: Priority LRU Queue Performance Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run Priority LRU Queue Performance Tests
      run: swift test --filter PriorityLRUQueuePerformanceTests

  test-ttl-priority-lru-queue-performance:
    name: TTL Priority LRU Queue Performance Tests
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [check-schedule, validate-test-coverage]
    
    steps:
    - uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app 2>/dev/null || sudo xcode-select -switch $(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
    - name: Run TTL Priority LRU Queue Performance Tests
      run: swift test --filter TTLPriorityLRUQueuePerformanceTests

  # Summary job to check all tests passed
  all-tests:
    name: All Tests Complete
    runs-on: macos-latest
    if: needs.check-schedule.outputs.should-run == 'true'
    needs: [
      check-schedule,
      test-monotask,
      test-monotask-cross-scenario,
      test-monotask-clear-result,
      test-kv-heavy-tasks-manager,
      test-kv-light-tasks-manager,
      test-retry-count,
      test-hash-queue,
      test-cpu-timestamp,
      test-heap,
      test-doubly-link,
      test-tracing-id-factory,
      test-heap-performance,
      test-cpu-timestamp-performance,
      test-cache-statistics,
      test-memory-cache,
      test-priority-lru-queue,
      test-ttl-priority-lru-queue,
      test-memory-cache-performance,
      test-priority-lru-queue-performance,
      test-ttl-priority-lru-queue-performance
    ]
    
    steps:
    - name: All tests passed
      run: |
        echo "🎉 All tests completed successfully!"
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "📅 Scheduled run completed with frequency: ${{ needs.check-schedule.outputs.frequency-type }}"
        fi