name: CI

on:
  push:
    branches: [develop]

jobs:
  # Job 1: MonstraBase Coverage
  test-monstra-base:
    name: MonstraBase Coverage
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run MonstraBase Tests (Coverage)
      run: swift test --filter MonstraBaseTests --enable-code-coverage
      timeout-minutes: 15

  # Job 2: MemoryCache Coverage  
  test-memory-cache:
    name: MemoryCache Coverage
    runs-on: macos-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run MemoryCache Tests (Coverage)
      run: swift test --filter MemoryCacheTests --enable-code-coverage
      timeout-minutes: 20

  # Job 3: Cache Statistics Coverage
  test-statistics:
    name: Statistics Coverage
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run Statistics Tests (Coverage)
      run: swift test --filter CacheStatisticsTests --enable-code-coverage
      timeout-minutes: 10

  # Job 4: Heavy Tasks Coverage
  test-heavy-tasks:
    name: Heavy Tasks Coverage
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run Heavy Tasks Tests (Coverage)
      run: swift test --filter KVHeavyTasksManagerTests --enable-code-coverage
      timeout-minutes: 25

  # Job 5: Light Tasks Coverage
  test-light-tasks:
    name: Light Tasks Coverage
    runs-on: macos-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run Light Tasks Tests (Coverage)
      run: swift test --filter KVLightTasksManagerTests --enable-code-coverage
      timeout-minutes: 20

  # Job 6: MonoTask Coverage
  test-mono-task:
    name: MonoTask Coverage
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
          
    - name: Build
      run: swift build
      
    - name: Run MonoTask Tests (Coverage)
      run: |
        swift test --filter MonoTaskTests --enable-code-coverage
        swift test --filter MonoTaskClearResultTests --enable-code-coverage
        swift test --filter MonoTaskForceUpdateTests --enable-code-coverage
        swift test --filter MonoTaskCrossScenarioTests --enable-code-coverage
      timeout-minutes: 15

  # Summary Job - waits for all coverage tests to complete
  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [test-monstra-base, test-memory-cache, test-statistics, test-heavy-tasks, test-light-tasks, test-mono-task]
    if: always()
    
    steps:
    - name: Check Coverage Results
      run: |
        echo "Coverage Test Results Summary:"
        echo "MonstraBase: ${{ needs.test-monstra-base.result }}"
        echo "MemoryCache: ${{ needs.test-memory-cache.result }}"
        echo "Statistics: ${{ needs.test-statistics.result }}"
        echo "Heavy Tasks: ${{ needs.test-heavy-tasks.result }}"
        echo "Light Tasks: ${{ needs.test-light-tasks.result }}"
        echo "MonoTask: ${{ needs.test-mono-task.result }}"
        
        # Count failures
        failures=0
        if [[ "${{ needs.test-monstra-base.result }}" != "success" ]]; then failures=$((failures+1)); fi
        if [[ "${{ needs.test-memory-cache.result }}" != "success" ]]; then failures=$((failures+1)); fi
        if [[ "${{ needs.test-statistics.result }}" != "success" ]]; then failures=$((failures+1)); fi
        if [[ "${{ needs.test-heavy-tasks.result }}" != "success" ]]; then failures=$((failures+1)); fi
        if [[ "${{ needs.test-light-tasks.result }}" != "success" ]]; then failures=$((failures+1)); fi
        if [[ "${{ needs.test-mono-task.result }}" != "success" ]]; then failures=$((failures+1)); fi
        
        if [[ $failures -gt 0 ]]; then
          echo "::error::$failures coverage job(s) failed"
          exit 1
        else
          echo "::notice::All coverage tests completed successfully!"
        fi
