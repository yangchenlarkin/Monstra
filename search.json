{"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV16maximumLoopCounts5Int64VvpZ":{"name":"maximumLoopCount","abstract":"\u003cp\u003eMaximum allowed value for sequential counter loop count.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV16minimumLoopCounts5Int64VvpZ":{"name":"minimumLoopCount","abstract":"\u003cp\u003eMinimum allowed value for sequential counter loop count.","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV9loopCountACs5Int64V_tcfc":{"name":"init(loopCount:)","abstract":"\u003cp\u003eInitializes a new TracingIDFactory with configurable sequential counter range.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV14safeNextStringSSyF":{"name":"safeNextString()","abstract":"\u003cp\u003eGenerates a thread-safe unique tracing ID as a String.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV16unsafeNextStringSSyF":{"name":"unsafeNextString()","abstract":"\u003cp\u003eGenerates a unique tracing ID as a String without thread safety guarantees.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV14safeNextUInt64s0F0VyF":{"name":"safeNextUInt64()","abstract":"\u003cp\u003eGenerates a thread-safe unique tracing ID as an unsigned 64-bit integer.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV16unsafeNextUInt64s0F0VyF":{"name":"unsafeNextUInt64()","abstract":"\u003cp\u003eGenerates a unique tracing ID as an unsigned 64-bit integer without thread safety.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV13safeNextInt64s0F0VyF":{"name":"safeNextInt64()","abstract":"\u003cp\u003eGenerates a thread-safe unique tracing ID as a signed 64-bit integer.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/TracingIDFactory.html#/s:7Monstra16TracingIDFactoryV15unsafeNextInt64s0F0VyF":{"name":"unsafeNextInt64()","abstract":"\u003cp\u003eGenerates a unique tracing ID as a signed 64-bit integer without thread safety.\u003c/p\u003e","parent_name":"TracingIDFactory"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV8infinityACvpZ":{"name":"infinity","abstract":"\u003cp\u003eA timestamp representing positive infinity (never expires).\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV3nowACyFZ":{"name":"now()","abstract":"\u003cp\u003eCreates a timestamp representing the current moment.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV4zeroACvpZ":{"name":"zero","abstract":"\u003cp\u003eA timestamp representing zero time (epoch).\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampVACycfc":{"name":"init()","abstract":"\u003cp\u003eInitialize with current CPU time.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV25timeIntervalSinceCPUStartSdyF":{"name":"timeIntervalSinceCPUStart()","abstract":"\u003cp\u003eReturns the time interval since CPU start in seconds.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV1loiySbAC_ACtFZ":{"name":"\u003c(_:_:)","abstract":"\u003cp\u003eImplements comparison between timestamps.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV1poiyA2C_SdtFZ":{"name":"+(_:_:)","abstract":"\u003cp\u003eAdds a time interval to a timestamp.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV1soiyA2C_SdtFZ":{"name":"-(_:_:)","abstract":"\u003cp\u003eSubtracts a time interval from a timestamp.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV17timeIntervalSinceySdACF":{"name":"timeIntervalSince(_:)","abstract":"\u003cp\u003eCalculates the time interval between two timestamps.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CPUTimeStamp.html#/s:7Monstra12CPUTimeStampV1soiySdAC_ACtFZ":{"name":"-(_:_:)","abstract":"\u003cp\u003eSubtracts two timestamps to get the interval between them.\u003c/p\u003e","parent_name":"CPUTimeStamp"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV6reportyAC_AA0B6RecordOtcSgvp":{"name":"report","abstract":"\u003cp\u003eOptional callback invoked after every record to emit the latest statistics and result.\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV13totalAccessesSivp":{"name":"totalAccesses","abstract":"\u003cp\u003eTotal number of cache accesses (invalid + null-hit + non-null-hit + miss).\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV7hitRateSdvp":{"name":"hitRate","abstract":"\u003cp\u003eHit rate (excluding invalid keys). Range: 0.0 \u0026hellip; 1.0\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV11successRateSdvp":{"name":"successRate","abstract":"\u003cp\u003eOverall success rate including invalid keys. Range: 0.0 \u0026hellip; 1.0\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV6recordyyAA0B6RecordOF":{"name":"record(_:)","abstract":"\u003cp\u003eRecords a cache result and triggers the optional report callback.\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/CacheStatistics.html#/s:7Monstra15CacheStatisticsV5resetyyF":{"name":"reset()","abstract":"\u003cp\u003eResets all statistics and assigns a new tracing ID.\u003c/p\u003e","parent_name":"CacheStatistics"},"Structs/MemoryUsageLimitation.html#/s:7Monstra21MemoryUsageLimitationV09unlimitedbC0SivpZ":{"name":"unlimitedMemoryUsage","abstract":"\u003cp\u003eMaximum memory usage allowed (in MB).\u003c/p\u003e","parent_name":"MemoryUsageLimitation"},"Structs/MemoryUsageLimitation.html#/s:7Monstra21MemoryUsageLimitationV8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eMaximum number of items allowed in the cache.\u003c/p\u003e","parent_name":"MemoryUsageLimitation"},"Structs/MemoryUsageLimitation.html#/s:7Monstra21MemoryUsageLimitationV6memorySivp":{"name":"memory","abstract":"\u003cp\u003eMaximum memory usage allowed (in MB).\u003c/p\u003e","parent_name":"MemoryUsageLimitation"},"Structs/MemoryUsageLimitation.html#/s:7Monstra21MemoryUsageLimitationV8capacity6memoryACSi_Sitcfc":{"name":"init(capacity:memory:)","abstract":"\u003cp\u003eCreates a new usage limitation with specified constraints.\u003c/p\u003e","parent_name":"MemoryUsageLimitation"},"Structs/MemoryUsageLimitation.html":{"name":"MemoryUsageLimitation","abstract":"\u003cp\u003eA high-performance, in-memory key-value cache with configurable thread safety and memory management.\u003c/p\u003e"},"Structs/CacheStatistics.html":{"name":"CacheStatistics","abstract":"\u003cp\u003eStatistics tracker for cache performance monitoring.\u003c/p\u003e"},"Structs/CPUTimeStamp.html":{"name":"CPUTimeStamp","abstract":"\u003cp\u003eCPUTimeStamp: High-precision, monotonic CPU time for measurements and TTL logic.\u003c/p\u003e"},"Structs/TracingIDFactory.html":{"name":"TracingIDFactory","abstract":"\u003cp\u003eA high-performance unique ID generator optimized for distributed tracing and request tracking.\u003c/p\u003e"},"Protocols/KVHeavyTaskDataProviderInterface.html#/s:7Monstra32KVHeavyTaskDataProviderInterfaceP5startyyF":{"name":"start()","abstract":"\u003cp\u003eInitiates the execution of the heavy task.\u003c/p\u003e","parent_name":"KVHeavyTaskDataProviderInterface"},"Protocols/KVHeavyTaskDataProviderInterface.html#/s:7Monstra32KVHeavyTaskDataProviderInterfaceP4stopAA0bcdE10StopActionOyF":{"name":"stop()","abstract":"\u003cp\u003eGracefully stops the currently executing task and determines cleanup strategy.\u003c/p\u003e","parent_name":"KVHeavyTaskDataProviderInterface"},"Protocols/KVHeavyTaskDataProviderInterface.html#/s:7Monstra32KVHeavyTaskDataProviderInterfacePAAE6resumeyyYaF":{"name":"resume()","abstract":"\u003cp\u003eDefault no-op resume implementation for providers that are not resumable.\u003c/p\u003e","parent_name":"KVHeavyTaskDataProviderInterface"},"Protocols/KVHeavyTaskDataProviderInterface.html":{"name":"KVHeavyTaskDataProviderInterface","abstract":"\u003cp\u003eProtocol defining the interface for heavy task data providers.\u003c/p\u003e"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO018DefaultInitialTimeD0SdvpZ":{"name":"DefaultInitialTimeInterval","abstract":"\u003cp\u003eDefault initial delay (seconds) for exponential strategies.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO34DefaultExponentialBackoffScaleRateSdvpZ":{"name":"DefaultExponentialBackoffScaleRate","abstract":"\u003cp\u003eDefault multiplier for exponential strategies.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO5fixedyAESd_tcAEmF":{"name":"fixed(timeInterval:)","abstract":"\u003cp\u003eAlways use a fixed delay.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO18exponentialBackoffyAESd_SdtcAEmF":{"name":"exponentialBackoff(initialTimeInterval:scaleRate:)","abstract":"\u003cp\u003eExponential backoff that multiplies delay on each \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbEnums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO4nextAEyF\"\u003enext()\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO29exponentialBackoffBeforeFixedyAESd_SdSuSdtcAEmF":{"name":"exponentialBackoffBeforeFixed(initialTimeInterval:originalInitialInterval:maxExponentialBackoffCount:scaleRate:)","abstract":"\u003cp\u003eExponential backoff for up to \u003ccode\u003emaxExponentialBackoffCount\u003c/code\u003e iterations, then switch to fixed.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO28exponentialBackoffAfterFixedyAESd_SdSuSdtcAEmF":{"name":"exponentialBackoffAfterFixed(initialTimeInterval:originalInitialInterval:maxFixedCount:scaleRate:)","abstract":"\u003cp\u003eFixed delay for up to \u003ccode\u003emaxFixedCount\u003c/code\u003e iterations, then switch to exponential backoff.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO4nextAEyF":{"name":"next()","abstract":"\u003cp\u003eReturns the next stage in the delay sequence.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html#/s:7Monstra10RetryCountO13IntervalProxyO04timeD0Sdvp":{"name":"timeInterval","abstract":"\u003cp\u003eThe current delay (seconds) represented by this proxy.\u003c/p\u003e","parent_name":"IntervalProxy"},"Enums/RetryCount/IntervalProxy.html":{"name":"IntervalProxy","abstract":"\u003cp\u003eDelay strategy used between retries.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO8infinityyA2C13IntervalProxyO_tcACmF":{"name":"infinity(intervalProxy:)","abstract":"\u003cp\u003eInfinite retries using the provided delay strategy.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO5countyACSu_AC13IntervalProxyOtcACmF":{"name":"count(count:intervalProxy:)","abstract":"\u003cp\u003eRetry up to \u003ccode\u003ecount\u003c/code\u003e times with the provided delay strategy.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO5neveryA2CmF":{"name":"never","abstract":"\u003cp\u003eNo retries.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO4nextACyF":{"name":"next()","abstract":"\u003cp\u003eReturns the next retry state after consuming one attempt.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO06shouldB0Sbvp":{"name":"shouldRetry","abstract":"\u003cp\u003eIndicates whether another retry should be attempted.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:7Monstra10RetryCountO12timeIntervalSdvp":{"name":"timeInterval","abstract":"\u003cp\u003eThe current delay (seconds) to wait before the next retry attempt.\u003c/p\u003e","parent_name":"RetryCount"},"Enums/RetryCount.html#/s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc":{"name":"init(integerLiteral:)","parent_name":"RetryCount"},"Enums/CacheRecord.html#/s:7Monstra11CacheRecordO10invalidKeyyA2CmF":{"name":"invalidKey","abstract":"\u003cp\u003eAttempt used an invalid key (rejected by validator).\u003c/p\u003e","parent_name":"CacheRecord"},"Enums/CacheRecord.html#/s:7Monstra11CacheRecordO14hitNullElementyA2CmF":{"name":"hitNullElement","abstract":"\u003cp\u003eCache contained a null element for the key.\u003c/p\u003e","parent_name":"CacheRecord"},"Enums/CacheRecord.html#/s:7Monstra11CacheRecordO17hitNonNullElementyA2CmF":{"name":"hitNonNullElement","abstract":"\u003cp\u003eCache contained a non-null element for the key.\u003c/p\u003e","parent_name":"CacheRecord"},"Enums/CacheRecord.html#/s:7Monstra11CacheRecordO4missyA2CmF":{"name":"miss","abstract":"\u003cp\u003eKey not found in cache.\u003c/p\u003e","parent_name":"CacheRecord"},"Enums/KVHeavyTaskDataProviderStopAction.html#/s:7Monstra33KVHeavyTaskDataProviderStopActionO5reuseyA2CmF":{"name":"reuse","abstract":"\u003cp\u003eKeep the DataProvider instance in memory for potential future resumption.\u003c/p\u003e","parent_name":"KVHeavyTaskDataProviderStopAction"},"Enums/KVHeavyTaskDataProviderStopAction.html#/s:7Monstra33KVHeavyTaskDataProviderStopActionO7deallocyA2CmF":{"name":"dealloc","abstract":"\u003cp\u003eDeallocate the DataProvider instance to free memory immediately.\u003c/p\u003e","parent_name":"KVHeavyTaskDataProviderStopAction"},"Enums/KVHeavyTaskDataProviderStopAction.html":{"name":"KVHeavyTaskDataProviderStopAction","abstract":"\u003cp\u003eDefines the action to take when a DataProvider is stopped during task interruption.\u003c/p\u003e"},"Enums/CacheRecord.html":{"name":"CacheRecord","abstract":"\u003cp\u003eDiscrete outcomes recorded by the cache for statistics.\u003c/p\u003e"},"Enums/RetryCount.html":{"name":"RetryCount","abstract":"\u003cp\u003eRetryCount: Configurable retry policy with backoff strategies.\u003c/p\u003e"},"Classes/Heap/ComparisonResult.html#/s:7Monstra4HeapC16ComparisonResultO7moreTopyAEyx_GAGmlF":{"name":"moreTop","abstract":"\u003cp\u003eLeft-hand element should be closer to the root (higher priority).\u003c/p\u003e","parent_name":"ComparisonResult"},"Classes/Heap/ComparisonResult.html#/s:7Monstra4HeapC16ComparisonResultO10moreBottomyAEyx_GAGmlF":{"name":"moreBottom","abstract":"\u003cp\u003eLeft-hand element should be farther from the root (lower priority).\u003c/p\u003e","parent_name":"ComparisonResult"},"Classes/Heap/ComparisonResult.html#/s:7Monstra4HeapC16ComparisonResultO5equalyAEyx_GAGmlF":{"name":"equal","abstract":"\u003cp\u003eElements have equivalent priority.\u003c/p\u003e","parent_name":"ComparisonResult"},"Classes/Heap/Event.html#/s:7Monstra4HeapC5EventO6insertyAEyx_Gx_SitcAGmlF":{"name":"insert(element:at:)","abstract":"\u003cp\u003eEmitted after inserting an element at the specified index.\u003c/p\u003e","parent_name":"Event"},"Classes/Heap/Event.html#/s:7Monstra4HeapC5EventO6removeyAEyx_Gx_tcAGmlF":{"name":"remove(element:)","abstract":"\u003cp\u003eEmitted after removing an element from the heap.\u003c/p\u003e","parent_name":"Event"},"Classes/Heap/Event.html#/s:7Monstra4HeapC5EventO4moveyAEyx_Gx_SitcAGmlF":{"name":"move(element:to:)","abstract":"\u003cp\u003eEmitted after moving an element to a new index due to heapify/swap.\u003c/p\u003e","parent_name":"Event"},"Classes/Heap.html#/s:7Monstra4HeapC7onEventyAC0D0Oyx_GcSgvp":{"name":"onEvent","abstract":"\u003cp\u003eCallback triggered on insert, remove, and index changes.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapC4rootxSgvp":{"name":"root","abstract":"\u003cp\u003eThe root element (highest priority), or nil if heap is empty.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapC8elementsSayxGvp":{"name":"elements","abstract":"\u003cp\u003eAll elements currently in the heap.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapC8capacity7compareACyxGSi_AC16ComparisonResultOyx_Gx_xtctcfc":{"name":"init(capacity:compare:)","abstract":"\u003cp\u003eInitializes a heap with given capacity and comparison strategy.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapC6insert_5forcexSgx_SbtF":{"name":"insert(_:force:)","abstract":"\u003cp\u003eInserts an element.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapC6remove2atxSgSi_tF":{"name":"remove(at:)","abstract":"\u003cp\u003eRemoves and returns an element at the specified index (default: root).\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap/Event.html":{"name":"Event","abstract":"\u003cp\u003eHeap event used for notifications.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap/ComparisonResult.html":{"name":"ComparisonResult","abstract":"\u003cp\u003eRelative priority between two elements.\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapCAASLRzlE03maxB08capacityACyxGXDSi_tFZ":{"name":"maxHeap(capacity:)","abstract":"\u003cp\u003eReturns a max heap (largest elements at root).\u003c/p\u003e","parent_name":"Heap"},"Classes/Heap.html#/s:7Monstra4HeapCAASLRzlE03minB08capacityACyxGXDSi_tFZ":{"name":"minHeap(capacity:)","abstract":"\u003cp\u003eReturns a min heap (smallest elements at root).\u003c/p\u003e","parent_name":"Heap"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC8capacityACyxGSi_tcfc":{"name":"init(capacity:)","abstract":"\u003cp\u003eInitializes a new empty hash queue with specified capacity.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC12enqueueFront3key15evictedStrategyxSgx_AA10DoublyLinkC07EvictedH0Oyx_GtF":{"name":"enqueueFront(key:evictedStrategy:)","abstract":"\u003cp\u003eEnqueues a key at the front (most recently used position).\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC12dequeueFrontxSgyF":{"name":"dequeueFront()","abstract":"\u003cp\u003eRemoves and returns the key at the front of the queue (most recently used).\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC12dequeueFront5countSayxGSu_tF":{"name":"dequeueFront(count:)","abstract":"\u003cp\u003eRemoves and returns multiple keys from the front of the queue (most recently used).\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC11dequeueBackxSgyF":{"name":"dequeueBack()","abstract":"\u003cp\u003eRemoves and returns the key at the back of the queue (least recently used).\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC11dequeueBack5countSayxGSu_tF":{"name":"dequeueBack(count:)","abstract":"\u003cp\u003eRemoves and returns multiple keys from the back of the queue (least recently used).\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC6remove3keyyx_tF":{"name":"remove(key:)","abstract":"\u003cp\u003eRemoves a specific key from the queue.","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eThe maximum number of keys the queue can hold.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC5countSivp":{"name":"count","abstract":"\u003cp\u003eThe current number of keys in the queue.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC6isFullSbvp":{"name":"isFull","abstract":"\u003cp\u003eIndicates if the queue is at maximum capacity.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC7isEmptySbvp":{"name":"isEmpty","abstract":"\u003cp\u003eIndicates if the queue is empty.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/HashQueue.html#/s:7Monstra9HashQueueC8contains3keySbx_tF":{"name":"contains(key:)","abstract":"\u003cp\u003eReturns whether the queue currently contains \u003ccode\u003ekey\u003c/code\u003e.\u003c/p\u003e","parent_name":"HashQueue"},"Classes/DoublyLink/Node.html#/s:7Monstra10DoublyLinkC4NodeC7elementxvp":{"name":"element","abstract":"\u003cp\u003eThe stored element value. Mutable.\u003c/p\u003e","parent_name":"Node"},"Classes/DoublyLink/Node.html#/s:7Monstra10DoublyLinkC4NodeC4nextAEyx_GSgvp":{"name":"next","abstract":"\u003cp\u003eNext node in the list (closer to the front).\u003c/p\u003e","parent_name":"Node"},"Classes/DoublyLink/Node.html#/s:7Monstra10DoublyLinkC4NodeC8previousAEyx_GSgvp":{"name":"previous","abstract":"\u003cp\u003ePrevious node in the list (closer to the back).\u003c/p\u003e","parent_name":"Node"},"Classes/DoublyLink/Node.html#/s:7Monstra10DoublyLinkC4NodeC7element4next8previousAEyx_Gx_AISgAJtcfc":{"name":"init(element:next:previous:)","abstract":"\u003cp\u003eInitializes a new node with key, value and optional links.\u003c/p\u003e","parent_name":"Node"},"Classes/DoublyLink/EvictedStrategy.html#/s:7Monstra10DoublyLinkC15EvictedStrategyO4FIFOyAEyx_GAGmlF":{"name":"FIFO","abstract":"\u003cp\u003eEvict from the back (least-recent). This is the standard LRU behavior.\u003c/p\u003e","parent_name":"EvictedStrategy"},"Classes/DoublyLink/EvictedStrategy.html#/s:7Monstra10DoublyLinkC15EvictedStrategyO4LIFOyAEyx_GAGmlF":{"name":"LIFO","abstract":"\u003cp\u003eDo not evict; reject the insertion by returning the provided node.","parent_name":"EvictedStrategy"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC5frontAC4NodeCyx_GSgvp":{"name":"front","abstract":"\u003cp\u003eMost-recent node (head) of the list.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC4backAC4NodeCyx_GSgvp":{"name":"back","abstract":"\u003cp\u003eLeast-recent node (tail) of the list.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC5countSivp":{"name":"count","abstract":"\u003cp\u003eNumber of nodes currently in the list.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eMaximum number of nodes allowed; 0 means no storage.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC4withACyxGSi_tcfc":{"name":"init(with:)","abstract":"\u003cp\u003eCreates a list with the given maximum number of nodes.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC12enqueueFront7elementAC4NodeCyx_GSg03newG0_AI07evictedG0tx_tF":{"name":"enqueueFront(element:)","abstract":"\u003cp\u003eEnqueues a new element at the front of the queue.","parent_name":"DoublyLink"},"Classes/DoublyLink/EvictedStrategy.html":{"name":"EvictedStrategy","abstract":"\u003cp\u003eEviction strategy applied when enqueuing into a full list.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC12enqueueFront4node15evictedStrategyAC4NodeCyx_GSgAI_AC07EvictedH0Oyx_GtF":{"name":"enqueueFront(node:evictedStrategy:)","abstract":"\u003cp\u003eEnqueues an existing node to the front of the queue.","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC11dequeueBackAC4NodeCyx_GSgyF":{"name":"dequeueBack()","abstract":"\u003cp\u003eRemoves and returns the node at the back of the queue (least recently used).\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC12dequeueFrontAC4NodeCyx_GSgyF":{"name":"dequeueFront()","abstract":"\u003cp\u003eRemoves and returns the node at the front of the queue (most recently used).\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink.html#/s:7Monstra10DoublyLinkC10removeNodeyyAC0E0Cyx_GF":{"name":"removeNode(_:)","abstract":"\u003cp\u003eRemoves a specific node from the queue.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/DoublyLink/Node.html":{"name":"Node","abstract":"\u003cp\u003eA node in the doubly linked list storing the element and links to adjacent nodes.\u003c/p\u003e","parent_name":"DoublyLink"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eThe maximum number of elements the cache can hold.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC7isEmptySbvp":{"name":"isEmpty","abstract":"\u003cp\u003eReturns true if the cache is empty.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC6isFullSbvp":{"name":"isFull","abstract":"\u003cp\u003eReturns true if the cache is full.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC5countSivp":{"name":"count","abstract":"\u003cp\u003eThe current number of elements in the cache.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC8capacityACyxq_GSi_tcfc":{"name":"init(capacity:)","abstract":"\u003cp\u003eInitializes a new empty cache with the specified capacity.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC3set7element3for8priority9expiredInq_Sgq__xS2dtF":{"name":"set(element:for:priority:expiredIn:)","abstract":"\u003cp\u003eInserts or updates an element for the given key, with optional priority and TTL.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC10getElement3forq_Sgx_tF":{"name":"getElement(for:)","abstract":"\u003cp\u003eRetrieves the element for the given key if present and not expired.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC13removeElement3forq_Sgx_tF":{"name":"removeElement(for:)","abstract":"\u003cp\u003eRemoves the element for the given key, if present.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC13removeElementq_SgyF":{"name":"removeElement()","abstract":"\u003cp\u003eRemoves and returns one element following expiration/priority/LRU rules.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/TTLPriorityLRUQueue.html#/s:7Monstra19TTLPriorityLRUQueueC21removeExpiredElementsyyF":{"name":"removeExpiredElements()","abstract":"\u003cp\u003eRemoves all expired elements from the cache.\u003c/p\u003e","parent_name":"TTLPriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eThe maximum number of elements the queue can hold.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC5countSivp":{"name":"count","abstract":"\u003cp\u003eThe current number of elements in the queue.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC7isEmptySbvp":{"name":"isEmpty","abstract":"\u003cp\u003eIndicates if the queue is empty.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC6isFullSbvp":{"name":"isFull","abstract":"\u003cp\u003eIndicates if the queue is full.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC8capacityACyxq_GSi_tcfc":{"name":"init(capacity:)","abstract":"\u003cp\u003eInitializes a new empty queue with specified capacity.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC10setElement_3for4withq_Sgq__xSdtF":{"name":"setElement(_:for:with:)","abstract":"\u003cp\u003eInserts or updates an element for the given key and priority.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC10getElement3forq_Sgx_tF":{"name":"getElement(for:)","abstract":"\u003cp\u003eRetrieves the element for the given key and refreshes its LRU position.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC13removeElement3forq_Sgx_tF":{"name":"removeElement(for:)","abstract":"\u003cp\u003eRemoves the element for the given key, if present.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC13removeElementq_SgyF":{"name":"removeElement()","abstract":"\u003cp\u003eRemoves and returns the least recently used element across all priorities.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/PriorityLRUQueue.html#/s:7Monstra16PriorityLRUQueueC17getLeastRecentKeyxSgyF":{"name":"getLeastRecentKey()","abstract":"\u003cp\u003eReturns the key of the least recently used entry across all priorities.\u003c/p\u003e","parent_name":"PriorityLRUQueue"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO10invalidKeyyAEyxq__GAGmSHRzr0_lF":{"name":"invalidKey","abstract":"\u003cp\u003eKey failed validation according to the configured validator.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO14hitNullElementyAEyxq__GAGmSHRzr0_lF":{"name":"hitNullElement","abstract":"\u003cp\u003eCache contained an explicit null entry for this key.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO17hitNonNullElementyAEyxq__Gq__tcAGmSHRzr0_lF":{"name":"hitNonNullElement(element:)","abstract":"\u003cp\u003eCache hit with a non-null element.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO4missyAEyxq__GAGmSHRzr0_lF":{"name":"miss","abstract":"\u003cp\u003eKey not present in cache.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO7elementq_Sgvp":{"name":"element","abstract":"\u003cp\u003eConvenience accessor returning the associated element if present; otherwise nil.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/FetchResult.html#/s:7Monstra11MemoryCacheC11FetchResultO6isMissSbvp":{"name":"isMiss","abstract":"\u003cp\u003eIndicates whether the fetch resulted in a miss.\u003c/p\u003e","parent_name":"FetchResult"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV27enableThreadSynchronizationSbvp":{"name":"enableThreadSynchronization","abstract":"\u003cp\u003eWhether to enable thread synchronization using DispatchSemaphore (default: true)","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV21memoryUsageLimitationAA0bfG0Vvp":{"name":"memoryUsageLimitation","abstract":"\u003cp\u003eMemory and capacity constraints for the cache.\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV10defaultTTLSdvp":{"name":"defaultTTL","abstract":"\u003cp\u003eDefault TTL for non-null elements (in seconds).\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV24defaultTTLForNullElementSdvp":{"name":"defaultTTLForNullElement","abstract":"\u003cp\u003eDefault TTL for null elements (in seconds).\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV21ttlRandomizationRangeSdvp":{"name":"ttlRandomizationRange","abstract":"\u003cp\u003eRandomization range for TTL elements to prevent cache stampede (in seconds).\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV12keyValidatorySbxcvp":{"name":"keyValidator","abstract":"\u003cp\u003eKey validation function that returns true for valid keys. Fixed at initialization.\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV12costProviderySiq_cvp":{"name":"costProvider","abstract":"\u003cp\u003eFunction to calculate memory cost of elements in bytes.\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV27enableThreadSynchronization21memoryUsageLimitation10defaultTTL0K17TTLForNullElement21ttlRandomizationRange12keyValidator12costProviderAEyxq__GSb_AA0biJ0VS3dSbxcSiq_ctcfc":{"name":"init(enableThreadSynchronization:memoryUsageLimitation:defaultTTL:defaultTTLForNullElement:ttlRandomizationRange:keyValidator:costProvider:)","abstract":"\u003cp\u003eCreates a new configuration with specified parameters.\u003c/p\u003e","parent_name":"Configuration"},"Classes/MemoryCache/Configuration.html#/s:7Monstra11MemoryCacheC13ConfigurationV13defaultConfigAEyxq__GvpZ":{"name":"defaultConfig","abstract":"\u003cp\u003eDefault configuration (thread-synchronized with DispatchSemaphore, unlimited size, no expiration, all keys","parent_name":"Configuration"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC13configuration16statisticsReportACyxq_GAC13ConfigurationVyxq__G_yAA0C10StatisticsV_AA0C6RecordOtcSgtcfc":{"name":"init(configuration:statisticsReport:)","abstract":"\u003cp\u003eCreates a new memory cache with the specified configuration.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache/Configuration.html":{"name":"Configuration","abstract":"\u003cp\u003eConfiguration options for the memory cache behavior and limits.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC7isEmptySbvp":{"name":"isEmpty","abstract":"\u003cp\u003eReturns true if the cache is empty.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC6isFullSbvp":{"name":"isFull","abstract":"\u003cp\u003eReturns true if the cache is at capacity.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC5countSivp":{"name":"count","abstract":"\u003cp\u003eThe current number of elements in the cache.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC8capacitySivp":{"name":"capacity","abstract":"\u003cp\u003eThe maximum capacity of the cache.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC3set7element3for8priority9expiredInSayq_Gq_Sg_xS2dSgtF":{"name":"set(element:for:priority:expiredIn:)","abstract":"\u003cp\u003eInserts or updates an element for the given key with optional priority and expiration.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache/FetchResult.html":{"name":"FetchResult","abstract":"\u003cp\u003eResult of a cache fetch attempt for a key.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC10getElement3forAC11FetchResultOyxq__Gx_tF":{"name":"getElement(for:)","abstract":"\u003cp\u003eRetrieves the cached state for the given key.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC13removeElement3forq_Sgx_tF":{"name":"removeElement(for:)","abstract":"\u003cp\u003eRemoves the element for the given key, if present.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC13removeElementq_SgyF":{"name":"removeElement()","abstract":"\u003cp\u003eRemoves and returns the least recently used element from the cache.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC21removeExpiredElementsyyF":{"name":"removeExpiredElements()","abstract":"\u003cp\u003eRemoves all expired elements from the cache.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC14removeElements9toPercentySd_tF":{"name":"removeElements(toPercent:)","abstract":"\u003cp\u003eRemoves cache entries to reduce the cache size to a specified percentage of its current size.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MemoryCache.html#/s:7Monstra11MemoryCacheC15resetStatisticsyyF":{"name":"resetStatistics()","abstract":"\u003cp\u003eResets all recorded cache statistics to zero.\u003c/p\u003e","parent_name":"MemoryCache"},"Classes/MonoTask/Errors.html#/s:7Monstra8MonoTaskC6ErrorsO34executionCancelledDueToClearResultyAEyx_GAGmlF":{"name":"executionCancelledDueToClearResult","abstract":"\u003cp\u003eError sent to callbacks when execution is cancelled via clearResult(.cancel)\u003c/p\u003e","parent_name":"Errors"},"Classes/MonoTask/OngoingExecutionStrategy.html#/s:7Monstra8MonoTaskC24OngoingExecutionStrategyO6cancelyAEyx_GAGmlF":{"name":"cancel","abstract":"\u003cp\u003eCancel the current execution immediately and notify callbacks with cancellation error\u003c/p\u003e","parent_name":"OngoingExecutionStrategy"},"Classes/MonoTask/OngoingExecutionStrategy.html#/s:7Monstra8MonoTaskC24OngoingExecutionStrategyO7restartyAEyx_GAGmlF":{"name":"restart","abstract":"\u003cp\u003eAllow current execution to complete, then automatically restart with fresh execution\u003c/p\u003e","parent_name":"OngoingExecutionStrategy"},"Classes/MonoTask/OngoingExecutionStrategy.html#/s:7Monstra8MonoTaskC24OngoingExecutionStrategyO15allowCompletionyAEyx_GAGmlF":{"name":"allowCompletion","abstract":"\u003cp\u003eAllow current execution to complete normally, just clear the cached result\u003c/p\u003e","parent_name":"OngoingExecutionStrategy"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC14ResultCallbacka":{"name":"ResultCallback","abstract":"\u003cp\u003eCallback signature for receiving task execution results\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC17CallbackExecutiona":{"name":"CallbackExecution","abstract":"\u003cp\u003eCallback-based execution block signature for traditional async patterns\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC14AsyncExecutiona":{"name":"AsyncExecution","abstract":"\u003cp\u003eSwift async/await execution block signature for modern async patterns\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC5retry20resultExpireDuration9taskQueue08callbackI00H0ACyxGAA10RetryCountO_SdSo17OS_dispatch_queueCAMyys6ResultOyxs5Error_pGcctcfc":{"name":"init(retry:resultExpireDuration:taskQueue:callbackQueue:task:)","abstract":"\u003cp\u003eCreate MonoTask with callback-based execution (traditional async pattern)\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC5retry20resultExpireDuration9taskQueue08callbackI00H0ACyxGAA10RetryCountO_SdSo17OS_dispatch_queueCAMs6ResultOyxs5Error_pGyYactcfc":{"name":"init(retry:resultExpireDuration:taskQueue:callbackQueue:task:)","abstract":"\u003cp\u003eCreate MonoTask with async/await execution (modern async pattern)\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC11justExecute11forceUpdateySb_tF":{"name":"justExecute(forceUpdate:)","abstract":"\u003cp\u003eExecute task without waiting for result (fire-and-forget)\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC7execute11forceUpdate4thenySb_ys6ResultOyxs5Error_pGcSgtF":{"name":"execute(forceUpdate:then:)","abstract":"\u003cp\u003eExecute task with callback-based result handling\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC12asyncExecute11forceUpdates6ResultOyxs5Error_pGSb_tYaF":{"name":"asyncExecute(forceUpdate:)","abstract":"\u003cp\u003eExecute task with async/await and return Result type\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC13executeThrows11forceUpdatexSb_tYaKF":{"name":"executeThrows(forceUpdate:)","abstract":"\u003cp\u003eExecute task with async/await and throw on failure\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC13currentResultxSgvp":{"name":"currentResult","abstract":"\u003cp\u003eGet currently cached result without triggering execution\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC11isExecutingSbvp":{"name":"isExecuting","abstract":"\u003cp\u003eIndicates whether the task is currently executing.\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask/OngoingExecutionStrategy.html":{"name":"OngoingExecutionStrategy","abstract":"\u003cp\u003eStrategy for handling ongoing execution when clearing cached results\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask/Errors.html":{"name":"Errors","abstract":"\u003cp\u003eMonoTask-specific errors\u003c/p\u003e","parent_name":"MonoTask"},"Classes/MonoTask.html#/s:7Monstra8MonoTaskC11clearResult24ongoingExecutionStrategy21shouldRestartWhenIDLEyAC07OngoinggH0Oyx_G_SbtF":{"name":"clearResult(ongoingExecutionStrategy:shouldRestartWhenIDLE:)","abstract":"\u003cp\u003eManually invalidate cached result with fine-grained control over ongoing execution\u003c/p\u003e","parent_name":"MonoTask"},"Classes/KVLightTasksManager/Errors.html#/s:7Monstra19KVLightTasksManagerC6ErrorsO25evictedByPriorityStrategyyAEyxq__GAGmSHRzr0_lF":{"name":"evictedByPriorityStrategy","abstract":"\u003cp\u003eEvicted by the active priority strategy (e.g., queue full with LIFO/FIFO policy).\u003c/p\u003e","parent_name":"Errors"},"Classes/KVLightTasksManager/Config/PriorityStrategy.html#/s:7Monstra19KVLightTasksManagerC6ConfigV16PriorityStrategyO4LIFOyAGyxq___GAImSHRzr0_lF":{"name":"LIFO","abstract":"\u003cp\u003eLast-in, first-out. Newest keys are served first. Oldest may be evicted when queue is full.\u003c/p\u003e","parent_name":"PriorityStrategy"},"Classes/KVLightTasksManager/Config/PriorityStrategy.html#/s:7Monstra19KVLightTasksManagerC6ConfigV16PriorityStrategyO4FIFOyAGyxq___GAImSHRzr0_lF":{"name":"FIFO","abstract":"\u003cp\u003eFirst-in, first-out. Oldest keys are served first. New arrivals may be rejected when full.\u003c/p\u003e","parent_name":"PriorityStrategy"},"Classes/KVLightTasksManager/Config/PriorityStrategy.html":{"name":"PriorityStrategy","abstract":"\u003cp\u003eQueueing priority strategy applied when scheduling provider work.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV12dataProviderAC04DataG0Oyxq__Gvp":{"name":"dataProvider","abstract":"\u003cp\u003eThe selected data provider implementation.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV019maxNumberOfQueueingC0Sivp":{"name":"maxNumberOfQueueingTasks","abstract":"\u003cp\u003eMaximum number of keys allowed to be queued awaiting execution.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV018maxNumberOfRunningC0Sivp":{"name":"maxNumberOfRunningTasks","abstract":"\u003cp\u003eMaximum number of provider tasks allowed to run concurrently.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV10retryCountAA05RetryG0Ovp":{"name":"retryCount","abstract":"\u003cp\u003eRetry policy applied to failed provider attempts.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV16PriorityStrategyAeFOyxq___Gvp":{"name":"PriorityStrategy","abstract":"\u003cp\u003eQueue priority strategy used when scheduling work.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV05cacheE0AA11MemoryCacheC13ConfigurationVyxq__Gvp":{"name":"cacheConfig","abstract":"\u003cp\u003eCache configuration that controls memory limits, TTL, key validation, and thread safety.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV21cacheStatisticsReportyAA05CacheG0V_AA0I6RecordOtcSgvp":{"name":"cacheStatisticsReport","abstract":"\u003cp\u003eOptional callback for cache statistics reporting\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/Config.html#/s:7Monstra19KVLightTasksManagerC6ConfigV12dataProvider019maxNumberOfQueueingC00hij7RunningC010retryCount16PriorityStrategy05cacheE00Q16StatisticsReportAEyxq__GAC04DataG0Oyxq__G_S2iAA05RetryN0OAeJOyxq___GAA11MemoryCacheC13ConfigurationVyxq__GyAA0wR0V_AA0W6RecordOtcSgtcfc":{"name":"init(dataProvider:maxNumberOfQueueingTasks:maxNumberOfRunningTasks:retryCount:PriorityStrategy:cacheConfig:cacheStatisticsReport:)","abstract":"\u003cp\u003eInitializes a new KVLightTasksManager configuration.\u003c/p\u003e","parent_name":"Config"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO19MonoprovideCallbacka":{"name":"MonoprovideCallback","abstract":"\u003cp\u003eCallback signature for single-key provider results.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO20MultiprovideCallbacka":{"name":"MultiprovideCallback","abstract":"\u003cp\u003eCallback signature for multi-key provider results.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO11Monoprovidea":{"name":"Monoprovide","abstract":"\u003cp\u003eCallback-based single-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO16AsyncMonoprovidea":{"name":"AsyncMonoprovide","abstract":"\u003cp\u003eAsync/await single-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO15SyncMonoprovidea":{"name":"SyncMonoprovide","abstract":"\u003cp\u003eSync single-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO12Multiprovidea":{"name":"Multiprovide","abstract":"\u003cp\u003eCallback-based multi-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO17AsyncMultiprovidea":{"name":"AsyncMultiprovide","abstract":"\u003cp\u003eAsync/await multi-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO16SyncMultiprovidea":{"name":"SyncMultiprovide","abstract":"\u003cp\u003eSync multi-key provide.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO11monoprovideyAEyxq__Gyx_ys6ResultOyq_Sgs5Error_pGctccAGmSHRzr0_lF":{"name":"monoprovide(_:)","abstract":"\u003cp\u003eProvide one key via callback.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO16asyncMonoprovideyAEyxq__Gq_SgxYaKccAGmSHRzr0_lF":{"name":"asyncMonoprovide(_:)","abstract":"\u003cp\u003eProvide one key via async/await.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO15syncMonoprovideyAEyxq__Gq_SgxKccAGmSHRzr0_lF":{"name":"syncMonoprovide(_:)","abstract":"\u003cp\u003eProvide one key synchronously.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO12multiprovideyAEyxq__GSu_ySayxG_ys6ResultOySDyxq_SgGs5Error_pGctctcAGmSHRzr0_lF":{"name":"multiprovide(maximumBatchCount:_:)","abstract":"\u003cp\u003eProvide multiple keys via callback with batching.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO17asyncMultiprovideyAEyxq__GSu_SDyxq_SgGSayxGYaKctcAGmSHRzr0_lF":{"name":"asyncMultiprovide(maximumBatchCount:_:)","abstract":"\u003cp\u003eProvide multiple keys via async/await with batching.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html#/s:7Monstra19KVLightTasksManagerC12DataProviderO16syncMultiprovideyAEyxq__GSu_SDyxq_SgGSayxGKctcAGmSHRzr0_lF":{"name":"syncMultiprovide(maximumBatchCount:_:)","abstract":"\u003cp\u003eProvide multiple keys synchronously with batching.\u003c/p\u003e","parent_name":"DataProvider"},"Classes/KVLightTasksManager/DataProvider.html":{"name":"DataProvider","abstract":"\u003cp\u003eData provider styles for single and batch fetching.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager/Config.html":{"name":"Config","abstract":"\u003cp\u003eConfiguration for queue sizing, priority, retries, and cache policy.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC14ResultCallbacka":{"name":"ResultCallback","abstract":"\u003cp\u003eCallback delivering the result for a single key.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC19BatchResultCallbacka":{"name":"BatchResultCallback","abstract":"\u003cp\u003eCallback delivering results for a batch of keys.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC6configACyxq_GAC6ConfigVyxq__G_tcfc":{"name":"init(config:)","abstract":"\u003cp\u003eCreates a manager using a prepared configuration.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC12dataProviderACyxq_GAC04DataF0Oyxq__G_tcfc":{"name":"init(dataProvider:)","abstract":"\u003cp\u003eCreates a manager from a provider with default configuration values.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerCyACyxq_Gyx_ys6ResultOyq_Sgs5Error_pGctccfc":{"name":"init(_:)","abstract":"\u003cp\u003eInitializes using a callback-based single-key provider.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerCyACyxq_Gq_SgxYaKccfc":{"name":"init(_:)","abstract":"\u003cp\u003eInitializes using an async/await single-key provider.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerCyACyxq_Gq_SgxKccfc":{"name":"init(_:)","abstract":"\u003cp\u003eInitializes using a synchronous single-key provider.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC17maximumBatchCount_ACyxq_GSu_ySayxG_ys6ResultOySDyxq_SgGs5Error_pGctctcfc":{"name":"init(maximumBatchCount:_:)","abstract":"\u003cp\u003eInitializes using a callback-based multi-key provider with optional batching.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC17maximumBatchCount_ACyxq_GSu_SDyxq_SgGSayxGYaKctcfc":{"name":"init(maximumBatchCount:_:)","abstract":"\u003cp\u003eInitializes using an async/await multi-key provider with optional batching.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC17maximumBatchCount_ACyxq_GSu_SDyxq_SgGSayxGKctcfc":{"name":"init(maximumBatchCount:_:)","abstract":"\u003cp\u003eInitializes using a synchronous multi-key provider with optional batching.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager/Errors.html":{"name":"Errors","abstract":"\u003cp\u003eErrors specific to \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/KVLightTasksManager.html\"\u003eKVLightTasksManager\u003c/a\u003e\u003c/code\u003e.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC5fetch3key10completionyx_yx_s6ResultOyq_Sgs5Error_pGtctF":{"name":"fetch(key:completion:)","abstract":"\u003cp\u003eFetches a single key and returns the result via callback.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC5fetch4keys10completionySayxG_yx_s6ResultOyq_Sgs5Error_pGtctF":{"name":"fetch(keys:completion:)","abstract":"\u003cp\u003eFetches multiple keys and returns results via callback for each key.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC5fetch4keys13multiCallbackySayxG_ySayx_s6ResultOyq_Sgs5Error_pGtGctF":{"name":"fetch(keys:multiCallback:)","abstract":"\u003cp\u003eFetches multiple keys and returns results via batch callback.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC10asyncFetch4keysSayx_s6ResultOyq_Sgs5Error_pGtGSayxG_tYaF":{"name":"asyncFetch(keys:)","abstract":"\u003cp\u003eFetches multiple keys and returns results asynchronously.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC18asyncFetchThrowing3keyq_Sgx_tYaKF":{"name":"asyncFetchThrowing(key:)","abstract":"\u003cp\u003eFetches a single key and returns the result asynchronously.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVLightTasksManager.html#/s:7Monstra19KVLightTasksManagerC10asyncFetch3keys6ResultOyq_Sgs5Error_pGx_tYaF":{"name":"asyncFetch(key:)","abstract":"\u003cp\u003eFetches a single key and returns the result asynchronously.\u003c/p\u003e","parent_name":"KVLightTasksManager"},"Classes/KVHeavyTasksManager/Errors.html#/s:7Monstra19KVHeavyTasksManagerC6ErrorsO31invalidConcurrencyConfigurationyAEyxq_q0_q1__GAGmSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0bikL9InterfaceR1_r2_lF":{"name":"invalidConcurrencyConfiguration","abstract":"\u003cp\u003eThe configured maximum number of running tasks is invalid (\u0026lt;= 0).\u003c/p\u003e","parent_name":"Errors"},"Classes/KVHeavyTasksManager/Errors.html#/s:7Monstra19KVHeavyTasksManagerC6ErrorsO35taskEvictedDueToPriorityConstraintsyAEyxq_q0_q1__GxcAGmSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0blnO9InterfaceR1_r2_lF":{"name":"taskEvictedDueToPriorityConstraints(_:)","abstract":"\u003cp\u003eA task could not be enqueued due to priority/queue constraints.\u003c/p\u003e","parent_name":"Errors"},"Classes/KVHeavyTasksManager/Config/PriorityStrategy.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV16PriorityStrategyO4FIFOyAGyxq_q0_q1___GAImSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0bikL9InterfaceR1_r2_lF":{"name":"FIFO","abstract":"\u003cp\u003eFirst In, First Out - tasks execute in submission order.\u003c/p\u003e","parent_name":"PriorityStrategy"},"Classes/KVHeavyTasksManager/Config/PriorityStrategy.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV16PriorityStrategyO4LIFOyAGyxq_q0_q1___GAE12LIFOStrategyOyxq_q0_q1___GcAImSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0bjlM9InterfaceR1_r2_lF":{"name":"LIFO(_:)","abstract":"\u003cp\u003eLast In, First Out - most recent tasks get priority.\u003c/p\u003e","parent_name":"PriorityStrategy"},"Classes/KVHeavyTasksManager/Config/LIFOStrategy.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV12LIFOStrategyO5awaityAGyxq_q0_q1___GAImSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0bhjK9InterfaceR1_r2_lF":{"name":"await","abstract":"\u003cp\u003eNew tasks wait for currently running tasks to complete naturally.\u003c/p\u003e","parent_name":"LIFOStrategy"},"Classes/KVHeavyTasksManager/Config/LIFOStrategy.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV12LIFOStrategyO4stopyAGyxq_q0_q1___GAImSHRzAA0B20TaskBaseDataProviderCyxq_q0_GRb1_AA0bhjK9InterfaceR1_r2_lF":{"name":"stop","abstract":"\u003cp\u003eNew tasks stop currently running tasks to start immediately.\u003c/p\u003e","parent_name":"LIFOStrategy"},"Classes/KVHeavyTasksManager/Config/LIFOStrategy.html":{"name":"LIFOStrategy","abstract":"\u003cp\u003eDefines how new tasks handle currently running tasks in LIFO priority mode.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config/PriorityStrategy.html":{"name":"PriorityStrategy","abstract":"\u003cp\u003eDefines the overall task execution order and priority handling strategy.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV019maxNumberOfQueueingC0Sivp":{"name":"maxNumberOfQueueingTasks","abstract":"\u003cp\u003eMaximum number of tasks that can wait in the queue simultaneously.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV018maxNumberOfRunningC0Sivp":{"name":"maxNumberOfRunningTasks","abstract":"\u003cp\u003eMaximum number of tasks that can execute concurrently.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV16priorityStrategyAE08PriorityG0Oyxq_q0_q1___Gvp":{"name":"priorityStrategy","abstract":"\u003cp\u003eStrategy for determining task execution order and priority handling.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV05cacheE0AA11MemoryCacheC13ConfigurationVyxq__Gvp":{"name":"cacheConfig","abstract":"\u003cp\u003eConfiguration for caching completed task results.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV21cacheStatisticsReportyAA05CacheG0V_AA0I6RecordOtcSgvp":{"name":"cacheStatisticsReport","abstract":"\u003cp\u003eOptional callback for monitoring cache performance and behavior.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager/Config.html#/s:7Monstra19KVHeavyTasksManagerC6ConfigV019maxNumberOfQueueingC00fgh7RunningC016priorityStrategy05cacheE00M16StatisticsReportAEyxq_q0_q1__GSi_SiAE08PriorityL0Oyxq_q0_q1___GAA11MemoryCacheC13ConfigurationVyxq__GyAA0rN0V_AA0R6RecordOtcSgtcfc":{"name":"init(maxNumberOfQueueingTasks:maxNumberOfRunningTasks:priorityStrategy:cacheConfig:cacheStatisticsReport:)","abstract":"\u003cp\u003eInitializes a new KVHeavyTasksManager configuration with specified parameters.\u003c/p\u003e","parent_name":"Config"},"Classes/KVHeavyTasksManager.html#/s:7Monstra19KVHeavyTasksManagerC6configACyxq_q0_q1_GAC6ConfigVyxq_q0_q1__G_tcfc":{"name":"init(config:)","abstract":"\u003cp\u003eInitializes a new KVHeavyTasksManager with the specified configuration.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTasksManager.html#/s:7Monstra19KVHeavyTasksManagerC6configAC6ConfigVyxq_q0_q1__Gvp":{"name":"config","abstract":"\u003cp\u003eImmutable configuration that defines all manager behavior.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTasksManager/Config.html":{"name":"Config","abstract":"\u003cp\u003eConfiguration structure that controls all aspects of task manager behavior.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTasksManager/Errors.html":{"name":"Errors","abstract":"\u003cp\u003eError types emitted by \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/KVHeavyTasksManager.html\"\u003eKVHeavyTasksManager\u003c/a\u003e\u003c/code\u003e operations.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTasksManager.html#/s:7Monstra19KVHeavyTasksManagerC5fetch3key19customEventObserver6resultyx_yq0_YbcSgys6ResultOyq_Sgs5Error_pGYbcSgtF":{"name":"fetch(key:customEventObserver:result:)","abstract":"\u003cp\u003eFetch a single key using a heavy \u003ccode\u003eDataProvider\u003c/code\u003e, optionally observing custom events.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTasksManager.html#/s:7Monstra19KVHeavyTasksManagerC10asyncFetch3key19customEventObservers6ResultOyq_Sgs5Error_pGx_yq0_YbcSgtYaF":{"name":"asyncFetch(key:customEventObserver:)","abstract":"\u003cp\u003eFetch a single key asynchronously using a heavy \u003ccode\u003eDataProvider\u003c/code\u003e.\u003c/p\u003e","parent_name":"KVHeavyTasksManager"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC20CustomEventPublishera":{"name":"CustomEventPublisher","abstract":"\u003cp\u003eCallback type for publishing custom events during task execution.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC15ResultPublishera":{"name":"ResultPublisher","abstract":"\u003cp\u003eCallback type for publishing the final task result.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC3keyxvp":{"name":"key","abstract":"\u003cp\u003eThe unique identifier for this task instance.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC20customEventPublisheryyq0_Ybcvp":{"name":"customEventPublisher","abstract":"\u003cp\u003ePublisher for broadcasting custom events during task execution.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC15resultPublisheryys6ResultOyq_Sgs5Error_pGYbcvp":{"name":"resultPublisher","abstract":"\u003cp\u003ePublisher for delivering the final task result.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html#/s:7Monstra27KVHeavyTaskBaseDataProviderC3key20customEventPublisher06resultJ0ACyxq_q0_Gx_yq0_Ybcys6ResultOyq_Sgs5Error_pGYbctcfc":{"name":"init(key:customEventPublisher:resultPublisher:)","abstract":"\u003cp\u003eInitializes a new heavy task data provider instance.\u003c/p\u003e","parent_name":"KVHeavyTaskBaseDataProvider"},"Classes/KVHeavyTaskBaseDataProvider.html":{"name":"KVHeavyTaskBaseDataProvider","abstract":"\u003cp\u003eBase class for heavy task data providers that defines the foundation for task execution.\u003c/p\u003e"},"Classes/KVHeavyTasksManager.html":{"name":"KVHeavyTasksManager","abstract":"\u003cp\u003eComprehensive manager for resource-intensive computational tasks and operations.\u003c/p\u003e"},"Classes/KVLightTasksManager.html":{"name":"KVLightTasksManager","abstract":"\u003cp\u003eA lightweight key-value tasks manager that integrates a cache and configurable providers.\u003c/p\u003e"},"Classes/MonoTask.html":{"name":"MonoTask","abstract":"\u003cp\u003e\u003cstrong\u003eMonoTask: Single-Instance Task Executor with TTL Caching and Retry Logic\u003c/strong\u003e\u003c/p\u003e"},"Classes/MemoryCache.html":{"name":"MemoryCache","abstract":"\u003cp\u003eA high-performance, in-memory key-value cache with configurable thread safety and memory management.\u003c/p\u003e"},"Classes/PriorityLRUQueue.html":{"name":"PriorityLRUQueue","abstract":"\u003cp\u003ePriorityLRUQueue: Priority-aware LRU queue with O(1) average access and updates.\u003c/p\u003e"},"Classes/TTLPriorityLRUQueue.html":{"name":"TTLPriorityLRUQueue","abstract":"\u003cp\u003eTTLPriorityLRUQueue: Hybrid TTL + Priority + LRU cache.\u003c/p\u003e"},"Classes/DoublyLink.html":{"name":"DoublyLink","abstract":"\u003cp\u003eDoublyLink: Minimal doubly linked list used for LRU ordering.\u003c/p\u003e"},"Classes/HashQueue.html":{"name":"HashQueue","abstract":"\u003cp\u003eA high-performance hash-based queue that maintains insertion order with O(1) access and removal operations.\u003c/p\u003e"},"Classes/Heap.html":{"name":"Heap","abstract":"\u003cp\u003eHeap: Generic priority queue with custom ordering and fixed capacity.\u003c/p\u003e"},"Classes.html":{"name":"Classes","abstract":"\u003cp\u003eThe following classes are available globally.\u003c/p\u003e"},"Enums.html":{"name":"Enumerations","abstract":"\u003cp\u003eThe following enumerations are available globally.\u003c/p\u003e"},"Protocols.html":{"name":"Protocols","abstract":"\u003cp\u003eThe following protocols are available globally.\u003c/p\u003e"},"Structs.html":{"name":"Structures","abstract":"\u003cp\u003eThe following structures are available globally.\u003c/p\u003e"}}